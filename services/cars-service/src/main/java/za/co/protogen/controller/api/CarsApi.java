/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package za.co.protogen.controller.api;

import za.co.protogen.controller.models.CarDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-01-06T11:50:07.485639700Z[Europe/London]")
@Validated
public interface CarsApi {

    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Car added successfully") })
    @RequestMapping(value = "/cars",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addCar(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CarDto body);


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cars returned successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDto.class)))) })
    @RequestMapping(value = "/cars",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarDto>> getAllCars();


    @Operation(summary = "Return cars by  color", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cars returned successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDto.class)))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/color/{color}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarDto>> getCarByColor(@Parameter(in = ParameterIn.PATH, description = "color of cars to returned", required=true, schema=@Schema()) @PathVariable("color") String color);


    @Operation(summary = "Return a car by vin", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Car returned successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CarDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/vin/{vin}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CarDto> getCarById(@Parameter(in = ParameterIn.PATH, description = "vin of a car to be returned", required=true, schema=@Schema()) @PathVariable("vin") String vin);


    @Operation(summary = "Return cars identified by make", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Car returned successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDto.class)))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/make/{make}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarDto>> getCarByMake(@Parameter(in = ParameterIn.PATH, description = "make of cars to be returned", required=true, schema=@Schema()) @PathVariable("make") String make);


    @Operation(summary = "Return cars by year", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operation successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDto.class)))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/year/{year}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarDto>> getCarByYear(@Parameter(in = ParameterIn.PATH, description = "year of cars to returned", required=true, schema=@Schema()) @PathVariable("year") Integer year);


    @Operation(summary = "Remove a car by vin", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Car removed successfully"),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/vin/{vin}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeCarById(@Parameter(in = ParameterIn.PATH, description = "vin of a car to be removed", required=true, schema=@Schema()) @PathVariable("vin") String vin);


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cars returned successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarDto.class)))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/searchCars",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarDto>> searchCars(@Parameter(in = ParameterIn.QUERY, description = "vin of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "vin", required = false) String vin, @Parameter(in = ParameterIn.QUERY, description = "make of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "make", required = false) String make, @Parameter(in = ParameterIn.QUERY, description = "model of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "model", required = false) String model, @Parameter(in = ParameterIn.QUERY, description = "year of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "year", required = false) Integer year, @Parameter(in = ParameterIn.QUERY, description = "color of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "color", required = false) String color, @Parameter(in = ParameterIn.QUERY, description = "engine of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "engine", required = false) String engine, @Parameter(in = ParameterIn.QUERY, description = "transmission of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "transmission", required = false) String transmission, @Parameter(in = ParameterIn.QUERY, description = "fuel type of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "fuelType", required = false) String fuelType, @Parameter(in = ParameterIn.QUERY, description = "mileage of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "mileage", required = false) Integer mileage, @Parameter(in = ParameterIn.QUERY, description = "price of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "price", required = false) Integer price, @Parameter(in = ParameterIn.QUERY, description = "owner Id of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "ownerId", required = false) Integer ownerId, @Parameter(in = ParameterIn.QUERY, description = "features of a car to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "features", required = false) List features);


    @Operation(summary = "update a car identified by vin", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Car updated successfully"),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/cars/vin/{vin}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCar(@Parameter(in = ParameterIn.PATH, description = "vin of a car to be updated", required=true, schema=@Schema()) @PathVariable("vin") String vin, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CarDto body);

}

