/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package za.co.protogen.controller.api;

import za.co.protogen.controller.models.UserDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.threeten.bp.LocalDate;

import javax.validation.Valid;
import java.math.BigDecimal;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-01-07T19:36:07.383630200Z[Europe/London]")
@Validated
public interface UsersApi {

    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "User added successfully") })
    @RequestMapping(value = "/users",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addUser(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UserDto body);


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Users returned successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserDto.class)))) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserDto>> getAllUsers();


    @Operation(summary = "Return a user by id", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User returned successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserDto> getUserById(@Parameter(in = ParameterIn.PATH, description = "Id of a User to be returned", required=true, schema=@Schema()) @PathVariable("id") BigDecimal id);


    @Operation(summary = "Remove a user by id", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "User removed successfully"),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeUser(@Parameter(in = ParameterIn.PATH, description = "id of a user to be removed", required=true, schema=@Schema()) @PathVariable("id") BigDecimal id);


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Users returned successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserDto.class)))),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users/searchUsers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserDto>> searchUsers(@Parameter(in = ParameterIn.QUERY, description = "id of a user to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) BigDecimal id, @Parameter(in = ParameterIn.QUERY, description = "first name of a user to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "firstName", required = false) String firstName, @Parameter(in = ParameterIn.QUERY, description = "last name of a user to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "lastName", required = false) String lastName, @Parameter(in = ParameterIn.QUERY, description = "date  of birth of a user to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "dateOfBirth", required = false) LocalDate dateOfBirth, @Parameter(in = ParameterIn.QUERY, description = "rsa Id of a user to be searched" ,schema=@Schema()) @Valid @RequestParam(value = "rsaId", required = false) String rsaId);


    @Operation(summary = "update a user identified by id", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User updated successfully"),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users/{id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@Parameter(in = ParameterIn.PATH, description = "id of a user to be updated", required=true, schema=@Schema()) @PathVariable("id") BigDecimal id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UserDto body);

}

